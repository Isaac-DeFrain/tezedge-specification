package nodeActions;
import java.util.*;

public class NodeActions {

  public static final String PeersDnsLookupInit = new String("PeersDnsLookupInit");
  public static final String PeersDnsLookupError = new String("PeersDnsLookupError");
  public static final String PeersDnsLookupSuccess = new String("PeersDnsLookupSuccess");
  public static final String PeersDnsLookupCleanup = new String("PeersDnsLookupCleanup");
  public static final String PeersAddIncomingPeer = new String("PeersAddIncomingPeer");
  public static final String PeersAddMulti = new String("PeersAddMulti");
  public static final String PeersRemove = new String("PeersRemove");
  public static final String PeerConnectionIncomingAccept = new String("PeerConnectionIncomingAccept");
  public static final String PeerConnectionIncomingAcceptError = new String("PeerConnectionIncomingAcceptError");
  public static final String PeerConnectionIncomingAcceptSuccess = new String("PeerConnectionIncomingAcceptSuccess");
  public static final String PeerConnectionIncomingSuccess = new String("PeerConnectionIncomingSuccess");
  public static final String PeerConnectionOutgoingRandomInit = new String("PeerConnectionOutgoingRandomInit");
  public static final String PeerConnectionOutgoingInit = new String("PeerConnectionOutgoingInit");
  public static final String PeerConnectionOutgoingPending = new String("PeerConnectionOutgoingPending");
  public static final String PeerConnectionOutgoingError = new String("PeerConnectionOutgoingError");
  public static final String PeerConnectionOutgoingSuccess = new String("PeerConnectionOutgoingSuccess");
  public static final String PeerDisconnect = new String("PeerDisconnect");
  public static final String PeerDisconnected = new String("PeerDisconnected");
  public static final String P2pServerEvent = new String("P2pServerEvent");
  public static final String P2pPeerEvent = new String("P2pPeerEvent");
  public static final String WakeupEvent = new String("WakeupEvent");
  public static final String PeerTryWrite = new String("PeerTryWrite");
  public static final String PeerTryRead = new String("PeerTryRead");
  public static final String PeerChunkReadInit = new String("PeerChunkReadInit");
  public static final String PeerChunkReadPart = new String("PeerChunkReadPart");
  public static final String PeerChunkReadDecrypt = new String("PeerChunkReadDecrypt");
  public static final String PeerChunkReadReady = new String("PeerChunkReadReady");
  public static final String PeerChunkReadError = new String("PeerChunkReadError");
  public static final String PeerChunkWriteSetContent = new String("PeerChunkWriteSetContent");
  public static final String PeerChunkWriteEncryptContent = new String("PeerChunkWriteEncryptContent");
  public static final String PeerChunkWriteCreateChunk = new String("PeerChunkWriteCreateChunk");
  public static final String PeerChunkWritePart = new String("PeerChunkWritePart");
  public static final String PeerChunkWriteReady = new String("PeerChunkWriteReady");
  public static final String PeerChunkWriteError = new String("PeerChunkWriteError");
  public static final String PeerBinaryMessageReadInit = new String("PeerBinaryMessageReadInit");
  public static final String PeerBinaryMessageReadChunkReady = new String("PeerBinaryMessageReadChunkReady");
  public static final String PeerBinaryMessageReadSizeReady = new String("PeerBinaryMessageReadSizeReady");
  public static final String PeerBinaryMessageReadReady = new String("PeerBinaryMessageReadReady");
  public static final String PeerBinaryMessageReadError = new String("PeerBinaryMessageReadError");
  public static final String PeerBinaryMessageWriteSetContent = new String("PeerBinaryMessageWriteSetContent");
  public static final String PeerBinaryMessageWriteNextChunk = new String("PeerBinaryMessageWriteNextChunk");
  public static final String PeerBinaryMessageWriteReady = new String("PeerBinaryMessageWriteReady");
  public static final String PeerBinaryMessageWriteError = new String("PeerBinaryMessageWriteError");
  public static final String PeerHandshakingInit = new String("PeerHandshakingInit");
  public static final String PeerHandshakingConnectionMessageInit = new String("PeerHandshakingConnectionMessageInit");
  public static final String PeerHandshakingConnectionMessageEncode = new String("PeerHandshakingConnectionMessageEncode");
  public static final String PeerHandshakingConnectionMessageWrite = new String("PeerHandshakingConnectionMessageWrite");
  public static final String PeerHandshakingConnectionMessageRead = new String("PeerHandshakingConnectionMessageRead");
  public static final String PeerHandshakingConnectionMessageDecode = new String("PeerHandshakingConnectionMessageDecode");
  public static final String PeerHandshakingEncryptionInit = new String("PeerHandshakingEncryptionInit");
  public static final String PeerHandshakingMetadataMessageInit = new String("PeerHandshakingMetadataMessageInit");
  public static final String PeerHandshakingMetadataMessageEncode = new String("PeerHandshakingMetadataMessageEncode");
  public static final String PeerHandshakingMetadataMessageWrite = new String("PeerHandshakingMetadataMessageWrite");
  public static final String PeerHandshakingMetadataMessageRead = new String("PeerHandshakingMetadataMessageRead");
  public static final String PeerHandshakingMetadataMessageDecode = new String("PeerHandshakingMetadataMessageDecode");
  public static final String PeerHandshakingAckMessageInit = new String("PeerHandshakingAckMessageInit");
  public static final String PeerHandshakingAckMessageEncode = new String("PeerHandshakingAckMessageEncode");
  public static final String PeerHandshakingAckMessageWrite = new String("PeerHandshakingAckMessageWrite");
  public static final String PeerHandshakingAckMessageRead = new String("PeerHandshakingAckMessageRead");
  public static final String PeerHandshakingAckMessageDecode = new String("PeerHandshakingAckMessageDecode");
  public static final String PeerHandshakingError = new String("PeerHandshakingError");
  public static final String PeerHandshakingFinish = new String("PeerHandshakingFinish");
  public static final String StorageBlockHeadersPut = new String("StorageBlockHeadersPut");
  public static final String StorageBlockHeaderPutNextInit = new String("StorageBlockHeaderPutNextInit");
  public static final String StorageBlockHeaderPutNextPending = new String("StorageBlockHeaderPutNextPending");
  public static final String StorageStateSnapshotCreate = new String("StorageStateSnapshotCreate");
  public static final String StorageRequestCreate = new String("StorageRequestCreate");
  public static final String StorageRequestInit = new String("StorageRequestInit");
  public static final String StorageRequestPending = new String("StorageRequestPending");
  public static final String StorageRequestError = new String("StorageRequestError");
  public static final String StorageRequestSuccess = new String("StorageRequestSuccess");
  public static final String StorageRequestFinish = new String("StorageRequestFinish");

  public static Set<String> allActions() {
    Set<String> acts = new HashSet<String>();
    acts.add(PeersDnsLookupInit);
    acts.add(PeersDnsLookupError);
    acts.add(PeersDnsLookupSuccess);
    acts.add(PeersDnsLookupCleanup);
    acts.add(PeersAddIncomingPeer);
    acts.add(PeersAddMulti);
    acts.add(PeersRemove);
    acts.add(PeerConnectionIncomingAccept);
    acts.add(PeerConnectionIncomingAcceptError);
    acts.add(PeerConnectionIncomingAcceptSuccess);
    acts.add(PeerConnectionIncomingSuccess);
    acts.add(PeerConnectionOutgoingRandomInit);
    acts.add(PeerConnectionOutgoingInit);
    acts.add(PeerConnectionOutgoingPending);
    acts.add(PeerConnectionOutgoingError);
    acts.add(PeerConnectionOutgoingSuccess);
    acts.add(PeerDisconnect);
    acts.add(PeerDisconnected);
    acts.add(P2pServerEvent);
    acts.add(P2pPeerEvent);
    acts.add(WakeupEvent);
    acts.add(PeerTryWrite);
    acts.add(PeerTryRead);
    acts.add(PeerChunkReadInit);
    acts.add(PeerChunkReadPart);
    acts.add(PeerChunkReadDecrypt);
    acts.add(PeerChunkReadReady);
    acts.add(PeerChunkReadError);
    acts.add(PeerChunkWriteSetContent);
    acts.add(PeerChunkWriteEncryptContent);
    acts.add(PeerChunkWriteCreateChunk);
    acts.add(PeerChunkWritePart);
    acts.add(PeerChunkWriteReady);
    acts.add(PeerChunkWriteError);
    acts.add(PeerBinaryMessageReadInit);
    acts.add(PeerBinaryMessageReadChunkReady);
    acts.add(PeerBinaryMessageReadSizeReady);
    acts.add(PeerBinaryMessageReadReady);
    acts.add(PeerBinaryMessageReadError);
    acts.add(PeerBinaryMessageWriteSetContent);
    acts.add(PeerBinaryMessageWriteNextChunk);
    acts.add(PeerBinaryMessageWriteReady);
    acts.add(PeerBinaryMessageWriteError);
    acts.add(PeerHandshakingInit);
    acts.add(PeerHandshakingConnectionMessageInit);
    acts.add(PeerHandshakingConnectionMessageEncode);
    acts.add(PeerHandshakingConnectionMessageWrite);
    acts.add(PeerHandshakingConnectionMessageRead);
    acts.add(PeerHandshakingConnectionMessageDecode);
    acts.add(PeerHandshakingEncryptionInit);
    acts.add(PeerHandshakingMetadataMessageInit);
    acts.add(PeerHandshakingMetadataMessageEncode);
    acts.add(PeerHandshakingMetadataMessageWrite);
    acts.add(PeerHandshakingMetadataMessageRead);
    acts.add(PeerHandshakingMetadataMessageDecode);
    acts.add(PeerHandshakingAckMessageInit);
    acts.add(PeerHandshakingAckMessageEncode);
    acts.add(PeerHandshakingAckMessageWrite);
    acts.add(PeerHandshakingAckMessageRead);
    acts.add(PeerHandshakingAckMessageDecode);
    acts.add(PeerHandshakingError);
    acts.add(PeerHandshakingFinish);
    acts.add(StorageBlockHeadersPut);
    acts.add(StorageBlockHeaderPutNextInit);
    acts.add(StorageBlockHeaderPutNextPending);
    acts.add(StorageStateSnapshotCreate);
    acts.add(StorageRequestCreate);
    acts.add(StorageRequestInit);
    acts.add(StorageRequestPending);
    acts.add(StorageRequestError);
    acts.add(StorageRequestSuccess);
    acts.add(StorageRequestFinish);
    return acts;
  }
}
